# AgentVaultâ„¢ Production Environment Values
# Enterprise-grade configuration for production deployment
# Author: Dwiref Sharma
# Contact: DwirefS@SapientEdge.io

# Production global settings
global:
  environment: "production"
  imageRegistry: "agentvault.azurecr.io"
  imagePullSecrets:
    - name: acr-secret

# Production image settings
image:
  registry: "agentvault.azurecr.io"
  repository: "agentvault/core"
  tag: "v1.0.0"
  pullPolicy: Always

# High availability configuration
replicaCount: 5

# Production resource allocation
resources:
  limits:
    cpu: 4000m
    memory: 8Gi
    ephemeral-storage: 20Gi
  requests:
    cpu: 2000m
    memory: 4Gi
    ephemeral-storage: 10Gi

# Aggressive autoscaling for production
autoscaling:
  enabled: true
  minReplicas: 5
  maxReplicas: 20
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 5
        periodSeconds: 120
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15

# Production ingress with SSL
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
  hosts:
    - host: agentvault.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: agentvault-tls
      hosts:
        - agentvault.yourdomain.com

# Production ANF configuration
anf:
  enabled: true
  subscriptionId: "your-production-subscription-id"
  resourceGroup: "agentvault-prod-rg"
  accountName: "agentvault-prod-netapp"
  location: "eastus"
  
  capacityPools:
    ultra:
      name: "ultra-pool"
      size: "10TiB"
      serviceLevel: "Ultra"
      qosType: "Auto"
    premium:
      name: "premium-pool"
      size: "50TiB"
      serviceLevel: "Premium"
      qosType: "Auto"
    standard:
      name: "standard-pool"
      size: "100TiB"
      serviceLevel: "Standard"
      qosType: "Auto"
    cool:
      name: "cool-pool"
      size: "500TiB"
      serviceLevel: "Standard"
      qosType: "Manual"
  
  # Cross-region replication for disaster recovery
  replication:
    enabled: true
    destinationRegion: "westus2"
    schedule: "daily"

# Production orchestrator configuration
orchestrator:
  enabled: true
  replicaCount: 3
  
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  
  config:
    routingStrategy: "ml_optimized"
    cacheEnabled: true
    compressionEnabled: true
    encryptionEnabled: true
    
    mlOptimization:
      enabled: true
      modelUpdateInterval: "1h"
      predictionThreshold: 0.9
    
    performance:
      maxConcurrentRequests: 5000
      requestTimeout: "30s"
      connectionPoolSize: 200

# Production Redis Cluster
redis:
  enabled: true
  architecture: cluster
  
  cluster:
    enabled: true
    nodes: 6
    replicas: 2
  
  auth:
    enabled: true
    existingSecret: "redis-secret"
    existingSecretPasswordKey: "password"
  
  master:
    persistence:
      enabled: true
      size: 50Gi
      storageClass: "managed-csi-premium"
    
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi
  
  replica:
    persistence:
      enabled: true
      size: 50Gi
      storageClass: "managed-csi-premium"
    
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi

# Production PostgreSQL with HA
postgresql:
  enabled: true
  architecture: replication
  
  auth:
    existingSecret: "postgresql-secret"
    secretKeys:
      adminPasswordKey: "postgres-password"
      userPasswordKey: "password"
  
  primary:
    persistence:
      enabled: true
      size: 200Gi
      storageClass: "managed-csi-premium"
    
    resources:
      limits:
        cpu: 4000m
        memory: 8Gi
      requests:
        cpu: 2000m
        memory: 4Gi
    
    extendedConfiguration: |
      max_connections = 500
      shared_buffers = 2GB
      effective_cache_size = 6GB
      maintenance_work_mem = 512MB
      checkpoint_completion_target = 0.9
      wal_buffers = 16MB
      default_statistics_target = 100
      random_page_cost = 1.1
      effective_io_concurrency = 200
      work_mem = 2MB
      min_wal_size = 2GB
      max_wal_size = 8GB
      max_worker_processes = 8
      max_parallel_workers_per_gather = 4
      max_parallel_workers = 8
      max_parallel_maintenance_workers = 4
  
  readReplicas:
    replicaCount: 3
    persistence:
      enabled: true
      size: 200Gi
      storageClass: "managed-csi-premium"
    
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi

# Production ML services with GPU
mlServices:
  enabled: true
  
  agentDna:
    enabled: true
    replicaCount: 3
    
    resources:
      limits:
        cpu: 4000m
        memory: 8Gi
        nvidia.com/gpu: 2
      requests:
        cpu: 2000m
        memory: 4Gi
        nvidia.com/gpu: 1
    
    models:
      lstm:
        enabled: true
        modelPath: "/models/lstm-production"
      transformer:
        enabled: true
        modelPath: "/models/transformer-production"
      autoencoder:
        enabled: true
        modelPath: "/models/autoencoder-production"
  
  cognitiveBalancer:
    enabled: true
    replicaCount: 3
    
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi

# Production vector database with clustering
vectorDB:
  enabled: true
  type: "faiss"
  
  faiss:
    replicaCount: 3
    
    persistence:
      enabled: true
      size: 500Gi
      storageClass: "managed-csi-premium"
    
    resources:
      limits:
        cpu: 4000m
        memory: 16Gi
      requests:
        cpu: 2000m
        memory: 8Gi
    
    config:
      indexType: "HNSW"
      dimension: 1536
      metric: "cosine"

# Production security configuration
security:
  enabled: true
  
  encryption:
    enabled: true
    provider: "azure-keyvault"
    keyVaultName: "agentvault-prod-kv"
    keyRotationInterval: "30d"
  
  authentication:
    enabled: true
    providers:
      - "azure-ad"
      - "oauth2"
    
    azureAD:
      tenantId: "your-tenant-id"
      clientId: "your-client-id"
  
  authorization:
    enabled: true
    rbac: true
  
  networkPolicies:
    enabled: true
  
  podSecurityPolicies:
    enabled: true

# Comprehensive monitoring for production
monitoring:
  enabled: true
  
  prometheus:
    enabled: true
    server:
      persistentVolume:
        enabled: true
        size: 500Gi
        storageClass: "managed-csi-premium"
      
      resources:
        limits:
          cpu: 4000m
          memory: 8Gi
        requests:
          cpu: 2000m
          memory: 4Gi
      
      retention: "90d"
    
    alertmanager:
      enabled: true
      persistentVolume:
        enabled: true
        size: 50Gi
        storageClass: "managed-csi-premium"
      
      config:
        global:
          smtp_smarthost: 'localhost:587'
          smtp_from: 'agentvault-alerts@yourdomain.com'
        
        route:
          group_by: ['alertname']
          group_wait: 10s
          group_interval: 10s
          repeat_interval: 1h
          receiver: 'web.hook'
        
        receivers:
        - name: 'web.hook'
          webhook_configs:
          - url: 'https://your-webhook-url.com/alerts'
  
  grafana:
    enabled: true
    persistence:
      enabled: true
      size: 50Gi
      storageClass: "managed-csi-premium"
    
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi
    
    sidecar:
      dashboards:
        enabled: true
        searchNamespace: ALL
      datasources:
        enabled: true
        searchNamespace: ALL
  
  jaeger:
    enabled: true
    storage:
      type: elasticsearch
    
    elasticsearch:
      replicas: 3
      minimumMasterNodes: 2
      
      resources:
        limits:
          cpu: 2000m
          memory: 4Gi
        requests:
          cpu: 1000m
          memory: 2Gi
  
  customMetrics:
    enabled: true
    exportInterval: "15s"
    
    azureMonitor:
      enabled: true
      workspaceId: "your-workspace-id"
      dataCollectionEndpoint: "https://your-dce.eastus-1.ingest.monitor.azure.com"
      dataCollectionRuleId: "dcr-your-rule-id"

# Production backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  
  destinations:
    - type: "azure-blob"
      storageAccount: "agentvaultprodbackup"
      container: "agentvault-backups"
      retentionDays: 90
    
    - type: "aws-s3"
      bucket: "agentvault-prod-backups"
      region: "us-east-1"
      retentionDays: 365
  
  encryption:
    enabled: true
    keySource: "azure-keyvault"

# Production environment variables
env:
  LOG_LEVEL: "INFO"
  ENVIRONMENT: "production"
  ENABLE_METRICS: "true"
  ENABLE_TRACING: "true"
  CACHE_TTL: "3600"
  MAX_CONNECTIONS: "1000"

# Production health checks (strict)
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# Production pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 3

# Node affinity for production workloads
nodeSelector:
  kubernetes.io/os: linux
  agentpool: production

# Toleration for dedicated nodes
tolerations:
  - key: "workload"
    operator: "Equal"
    value: "production"
    effect: "NoSchedule"

# Anti-affinity for high availability
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - agentvault
      topologyKey: kubernetes.io/hostname
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - agentvault
        topologyKey: topology.kubernetes.io/zone

# Production-specific annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8081"
  prometheus.io/path: "/metrics"
  cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
  backup.agentvault.io/enabled: "true"
  monitoring.agentvault.io/sla: "99.9"

# SLA targets for monitoring
slaTargets:
  availability: 99.9
  latency_p95: 100  # 100ms
  error_rate: 0.1   # 0.1%